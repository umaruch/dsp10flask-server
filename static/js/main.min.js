//- Отключаем контекстное меню 
document.oncontextmenu = function() { return false };

// Добавление и удаление класса .active элементу, на который нажали
let toggleActiveClass = function() {
    this.classList.toggle("active");
}
let overlay = document.querySelector('.overlay'); //- Размытый фон

let btnSwithes = document.querySelectorAll('.js-btn-switch');
if (btnSwithes) {
    btnSwithes.forEach(function(btn, index) {
        btn.addEventListener('click', toggleActiveClass);
    })
}
// ******************* Боковое меню *******************
let menu = document.querySelector('.js-btn__menu'); //- Кнопка вызова меню
if (menu) {
    let sidebar = document.querySelector('.js-sidebar'); //- Боковое меню
    let sidebarClose = document.querySelector('.js-sidebar__close'); //- Кнопка закрытия бокового меню

    // Открываем боковое меню
    menu.addEventListener('click', function() {
        if (sidebar.classList.contains('active')) {
            sidebar.classList.remove('active')
            overlay.classList.remove('active')
        } else {
            sidebar.classList.add('active')
            overlay.classList.add('active')
        }
    });
    //- Закрываем сайдбар
    let closeSidebar = function() {
            sidebar.classList.remove('active');
            overlay.classList.remove('active');
        }
        //- Закрываем сайдбар при клике на крестик
    sidebarClose.addEventListener('click', closeSidebar);
    //- Закрываем сайдбар при клике на размытый фон
    overlay.addEventListener('click', closeSidebar);
}

// ******************* DSP Setup *******************
if (document.querySelector('.dsp-setting')) {
    let jsTriggers = document.querySelectorAll('.js-dsp-tab-trigger'),
        jsMixerTrigger = document.querySelectorAll('.js-mixer-tab-trigger'),
        jsFilterTrigger = document.querySelectorAll('.js-filter-tab-trigger'),
        jsEqTrigger = document.querySelectorAll('.js-eq-tab-trigger'),
        jsDelayTrigger = document.querySelectorAll('.js-delay-tab-trigger');
    // DSP Tabs
    jsTriggers.forEach(function(trigger) {
        trigger.addEventListener('click', function() {
            let id = this.getAttribute('data-tab'),
                name = this.getAttribute('data-name'),
                content = document.querySelector('.js-dsp-tab-content[data-tab="' + id + '"]'),
                activeTrigger = document.querySelector('.js-dsp-tab-trigger.active'),
                activeContent = document.querySelector('.js-dsp-tab-content.active');
            document.querySelector('.pagetitle').textContent = name;
            activeTrigger.classList.remove('active'); // 1
            trigger.classList.add('active'); // 2

            activeContent.classList.remove('active'); // 3
            content.classList.add('active'); // 4
        });
    });
    // MIXER Tabs
    jsMixerTrigger.forEach(function(trigger) {
        trigger.addEventListener('click', function() {
            let id = this.getAttribute('data-tab'),
                content = document.querySelector('.js-mixer-tab-content[data-tab="' + id + '"]'),
                activeTrigger = document.querySelector('.js-mixer-tab-trigger.active'),
                activeContent = document.querySelector('.js-mixer-tab-content.active');
            // document.querySelector('.pagetitle').textContent = name;
            activeTrigger.classList.remove('active'); // 1
            trigger.classList.add('active'); // 2

            activeContent.classList.remove('active'); // 3
            content.classList.add('active'); // 4
        });
    });
    // FILTER Tabs
    jsFilterTrigger.forEach(function(trigger) {
        trigger.addEventListener('click', function() {
            let id = this.getAttribute('data-tab'),
                content = document.querySelector('.js-filter-tab-content[data-tab="' + id + '"]'),
                activeTrigger = document.querySelector('.js-filter-tab-trigger.active'),
                activeContent = document.querySelector('.js-filter-tab-content.active');
            // document.querySelector('.pagetitle').textContent = name;
            activeTrigger.classList.remove('active'); // 1
            trigger.classList.add('active'); // 2

            activeContent.classList.remove('active'); // 3
            content.classList.add('active'); // 4
        });
    });
    // EQ Tabs
    jsEqTrigger.forEach(function(trigger) {
        trigger.addEventListener('click', function() {
            let id = this.getAttribute('data-tab'),
                content = document.querySelector('.js-eq-tab-content[data-tab="' + id + '"]'),
                activeTrigger = document.querySelector('.js-eq-tab-trigger.active'),
                activeContent = document.querySelector('.js-eq-tab-content.active');
            // document.querySelector('.pagetitle').textContent = name;
            activeTrigger.classList.remove('active'); // 1
            trigger.classList.add('active'); // 2

            activeContent.classList.remove('active'); // 3
            content.classList.add('active'); // 4
        });
    });
    // DELAY Tabs
    jsDelayTrigger.forEach(function(trigger) {
        trigger.addEventListener('click', function() {
            let id = this.getAttribute('data-tab'),
                content = document.querySelector('.js-delay-tab-content[data-tab="' + id + '"]'),
                activeTrigger = document.querySelector('.js-delay-tab-trigger.active'),
                activeContent = document.querySelector('.js-delay-tab-content.active');
            activeTrigger.classList.remove('active'); // 1
            trigger.classList.add('active'); // 2

            activeContent.classList.remove('active'); // 3
            content.classList.add('active'); // 4
        });
    });
}

// ******************* Модалки *******************
if (document.querySelector(".history")) {
    let historyLog = document.querySelector(".history"),
        historyModal = document.querySelector('#clearLog'),
        modalCloseBtn = document.querySelector('.js-modal-close');

    let closeModal = function() {
        document.querySelector('.modal').classList.remove('modal-open');
        overlay.classList.remove('active');
        document.querySelector('header').removeAttribute('style');
    }

    historyLog.addEventListener('click', function() {
        historyModal.classList.add('modal-open');
        overlay.classList.add('active');
        document.querySelector('header').setAttribute('style', 'z-index: 105');
    });

    overlay.addEventListener('click', closeModal);
    modalCloseBtn.addEventListener('click', closeModal);
}

// ******************* Настройки *******************
let ranges = document.querySelectorAll('.range');
if (ranges) {
    let rangeManuals = document.querySelectorAll('.range-manual');
    ranges.forEach(function(range, index) {
        let rangeBar = range.querySelector(".range__bar"),
            rangeParent = range.parentNode,
            rangeCount = range.querySelector(".range__count"),
            rangeBtn = range.querySelector("button.range__icon"),
            rangeStart = 0,
            rangeMin = 0,
            rangeMax = 100,
            rangeStep = 1;
        if (rangeBar.dataset.value) { rangeStart = rangeBar.dataset.value }
        if (rangeBar.dataset.min) { rangeMin = rangeBar.dataset.min }
        if (rangeBar.dataset.max) { rangeMax = rangeBar.dataset.max }
        if (rangeBar.dataset.step) { rangeStep = rangeBar.dataset.step }
        noUiSlider.create(rangeBar, {
            start: [parseInt(rangeStart)],
            step: parseInt(rangeStep),
            connect: 'lower',
            behaviour: 'snap',
            range: {
                'min': [parseInt(rangeMin)],
                'max': [parseInt(rangeMax)]
            }
        });
        if (rangeCount) {
            rangeBar.noUiSlider.on('update', function() {
                let rangeCurrentCount = Math.round(rangeBar.noUiSlider.get());
                rangeCount.textContent = rangeCurrentCount + '%';
                rangeBar.dataset.value = rangeCurrentCount;
                if (rangeBtn) {
                    if (rangeCurrentCount <= 0) {
                        rangeBtn.classList.add('active')
                    } else {
                        rangeBtn.classList.remove('active')
                    }
                }
            });
        }
        if (rangeBtn) {
            rangeBtn.addEventListener('click', function() {
                if (rangeBtn.classList.contains('active')) {
                    rangeBtn.classList.remove('active');
                    rangeBar.removeAttribute('disabled');
                    rangeBar.classList.remove('range__disabled');

                    if (rangeParent.classList == 'range-manual') {
                        rangeParent.querySelector('.manual__switch--down').removeAttribute('disabled');
                        rangeParent.querySelector('.manual__switch--up').removeAttribute('disabled');
                    }
                } else {
                    rangeBtn.classList.add('active');
                    rangeBar.setAttribute('disabled', true);
                    rangeBar.classList.add('range__disabled');
                    if (rangeParent.classList == 'range-manual') {
                        rangeParent.querySelector('.manual__switch--down').setAttribute('disabled', true);
                        rangeParent.querySelector('.manual__switch--up').setAttribute('disabled', true);
                    }
                }
            })
        }
    });

    rangeManuals.forEach(function(rangeManual) {
        let rangeBar = rangeManual.querySelector('.range__bar'),
            rangeBtnUp = rangeManual.querySelector('.manual__switch--up'),
            rangeBtnDown = rangeManual.querySelector('.manual__switch--down'),
            rangeStep = parseInt(rangeBar.dataset.step),
            rangeMin = parseInt(rangeBar.dataset.min),
            rangeMax = parseInt(rangeBar.dataset.max),
            rangeValue = parseInt(rangeBar.dataset.value);
        rangeBtnUp.addEventListener('click', function() {
            rangeBar.noUiSlider.set(Math.round(rangeBar.noUiSlider.get()) + rangeStep);
        });
        rangeBtnDown.addEventListener('click', function() {
            rangeBar.noUiSlider.set(Math.round(rangeBar.noUiSlider.get()) - rangeStep);
        });
    });
}

// ******************* Управление плеером ************************
if (document.querySelector(".player")) {
    var volumeMute = document.querySelector('.js-controls__btn--mute'), //- Кнопка вкл/выкл звука
        volume = document.querySelector('.js-volume .range__bar'), //- Параметр громкости по умолчанию
        volumeCurrent = volume.dataset.value, //- Текущее значение громкости звука

        repeat = document.querySelector('.controls__btn--repeat'),
        shuffle = document.querySelector('.controls__btn--shuffle'),
    
    // Нажатие кнопок переключения воспроизведения и переключения треков
        current_track = document.querySelector(".track-name__title"), // Название текущего трека
        current_artist = document.querySelector(".track-name__artist"); // Название автора трека
        play = document.querySelector(".controls__btn--play"), // Кнопка воспроизведения и паузы
        next = document.querySelector(".controls__btn--next"), // Кнопка переключения следующего трека
        prev = document.querySelector(".controls__btn--prev"), // Кнопка переключения предыдущего трека
        progress_bar = document.querySelector(".progress-bar__passed"),
        time_passed = document.querySelector(".progress-bar__time--left"),
        time_full = document.querySelector(".progress-bar__time--right");
    
    var p_state,
        p_rangom,
        p_repeat,
        p_single;

    // Переключение статуса воспроизведения
    play.addEventListener('click', function(){
        let request = new XMLHttpRequest();
        let cmd;
        if (p_state == "play"){
            cmd = "pause";
        } else {
            cmd = "play";
        }
        request.open('GET', "http://"+window.location.host+"/api/player?cmd="+cmd);
        request.send();
    });

    // Переключение на трек назад
    prev.addEventListener('click', function(){
        let request = new XMLHttpRequest();
        request.open('GET', "http://"+window.location.host+"/api/player?cmd=prev");
        request.send();
    });

    // Переключение на трек назад
    next.addEventListener('click', function(){
        let request = new XMLHttpRequest();
        request.open('GET', "http://"+window.location.host+"/api/player?cmd=next");
        request.send();
    });

    shuffle.addEventListener('click', function(){
        let request = new XMLHttpRequest();
        let value;
        if (p_rangom == 0){
            value = "1";
        } else {
            value = "0";
        }
        request.open('GET', "http://"+window.location.host+"/api/player?cmd=random&value="+value);
        request.send();
    });

    repeat.addEventListener('click', function(){
        let request = new XMLHttpRequest();
        let value;
        if (p_repeat == 0){
            value = "1";
        } else {
            value = "0";
        }
        request.open('GET', "http://"+window.location.host+"/api/player?cmd=repeat&value="+value);
        request.send();
    });

	//- Отключаем и включаем звук с сохранением предыдущей позиции громкости
	volumeMute.addEventListener('click', function() {
        let request = new XMLHttpRequest();
        request.open('GET', "http://"+window.location.host+"/api/player?cmd=volume&value=0");
        request.send();
    });



    // Изменение слайдера громкости
	volume.noUiSlider.on('update', function(values, handle) {
        volume.dataset.value = values[handle];
    });
	
    volume.noUiSlider.on('change', function(values, handle) {
        let request = new XMLHttpRequest();
        request.open('GET', "http://"+window.location.host+"/api/player?cmd=volume&value="+(values[handle]|0));
        request.send();
    });	


    
    // обновление текущего трека
    function change_current_song(data){
        current_track.innerHTML = data.title;
        current_artist.innerHTML = data.artist;
        // В дальнейшем реализовать поиск фона для трека
    }

    // Обновление индикатора воспроизведения
    function change_state(data){
        p_state = data;
        if (data=="stop" || data=="pause"){
            play.classList.remove("active");
        } else {
            play.classList.add("active");
        }
    }

    // обновление времени воспроизведения
    function change_song_timer(passed, full){
        pass_proc = 100 - (passed*100/full) | 0;
        progress_bar.style.transform = "translateX(-"+pass_proc+"%)";
        passed_minutes = passed/60 | 0;
        passed_seconds = passed%60 | 0;
        full_minutes = full/60 | 0;
        full_seconds = full%60 | 0;
        // console.log(passed_minutes);
        // console.log(passed_seconds);
        time_passed.innerHTML = passed_minutes+":"+passed_seconds;
        time_full.innerHTML = full_minutes+":"+full_seconds; 
    }

    // обновление слайдера громкости
    function change_volume(data){
        if (data==0){
            volumeCurrent = volume.noUiSlider.get();
            volumeMute.classList.add("active");
        } else {
            volumeMute.classList.remove("active");
        }
        volume.noUiSlider.set(data);
    }

    // обновение индикатора повтора
    function change_repeat_status(rep, song){
        p_repeat = rep;
        p_single = song;
        if (rep){
            repeat.classList.add("active");
        } else {
            repeat.classList.remove("active");
        }
    }

    // обновление индикатора рандома
    function change_rangom_status(rand){
        p_rangom = rand;
        if (rand){
            shuffle.classList.add("active");
        } else {
            shuffle.classList.remove("active");
        }
    }

    // синхронизация плеера с сервером
    function sync_player_status(data){
        change_state(data.state);
        if(typeof data.songinfo != 'undefined'){
            change_current_song(data.songinfo);
        }
        change_song_timer(data.elapsed, data.duration);
        change_volume(data.volume);
        change_rangom_status(data.random);
        change_repeat_status(data.repeat, data.single);
    }
}

// ************* ЭКВАЛАЙЗЕР *************
let eqRanges = document.querySelectorAll('.range-vertical');

if (eqRanges) {

    eqRanges.forEach(function(eqRange) {

        let rangeBar = eqRange.querySelector('.range-vertical__bar'),
            rangeGain = eqRange.querySelector('.range-vertical__gain'),
            rangeStart = 0,
            rangeMin = 0,
            rangeMax = 100,
            rangeStep = 1;
        if (rangeBar.dataset.value) { rangeStart = rangeBar.dataset.value }
        if (rangeBar.dataset.min) { rangeMin = rangeBar.dataset.min }
        if (rangeBar.dataset.max) { rangeMax = rangeBar.dataset.max }
        if (rangeBar.dataset.step) { rangeStep = rangeBar.dataset.step }
        noUiSlider.create(rangeBar, {
            start: [parseInt(rangeStart)],
            step: parseInt(rangeStep),
            // connect: 'lower',
            behaviour: 'snap',
            orientation: "vertical",
            direction: 'rtl',
            range: {
                'min': parseInt(rangeMin),
                'max': parseInt(rangeMax)
            }
        });
        rangeBar.noUiSlider.on('update', function() {
            let rangeCurrentCount = Math.round(rangeBar.noUiSlider.get());
            rangeGain.textContent = rangeCurrentCount + '.0dB';
        });
    })

    // Сбрасываем эквалайзер
    let equalizerList = document.querySelectorAll('.equalizer');
    equalizerList.forEach(function(eq) {
        let eqResets = eq.querySelector('.js-btn-reset');
        let eqRangeBars = eq.querySelectorAll('.range-vertical__bar')
        eqResets.addEventListener('click', function() {
            eqRangeBars.forEach(function(rangeBar) {
                rangeBar.noUiSlider.set(0)
            })
        })
    })
}

// ************* СЧЕТЧИК (- 1 +) *************
let counters = document.querySelectorAll('.counter')

if (counters) {

    counters.forEach(function(count, index) {

        let countUp = count.querySelector('.counter__plus'),
            countDown = count.querySelector('.counter__minus'),
            counter = count.querySelector('.counter__value'),
            countValue = count.querySelector('.counter__value').innerHTML
        counterMax = 2,
            counterMin = 1;

        countUp.addEventListener('click', function() {

            if (+countValue >= counterMax) {

                counter.textContent = counterMax;
                return false;
            } else {
                counter.textContent = ++countValue;
            }
        })
        countDown.addEventListener('click', function() {
            if (+countValue <= counterMin) {
                counter.textContent = counterMin;
                return false;
            } else {
                counter.textContent = --countValue;
            }
        })
    })
}

// ************* НАЗВАНИЯ СЕКЦИЙ  *************
let titles = document.querySelectorAll('.js-title'); // Коллекция секций

if (titles) {
    // Перебираем коллекцию секций
    titles.forEach(function(title) {

        // Событие при клике на название текущей секции
        title.addEventListener('click', function() {

            let name = this, // Текущая секция
                modal = document.querySelector('#newName'), // Модальное окно
                form = modal.querySelector('form'), // Форма модального окна
                input = modal.querySelector('input'), // Поле input
                save = modal.querySelector('.js-modal-save'), // Кнопка Сохранить
                close = modal.querySelector('.js-modal-close'), // Кнопка Закрыть
                currentTitle = modal.querySelector('.current-title'); // Поле с текущим названием секции в форме

            // 1. Очищаем все поля формы
            form.reset();

            // 2. Заполняем поле с текущим названием секции в форме
            currentTitle.textContent = this.textContent;

            // 3. Открываем модальное окно
            modal.classList.add('modal-open');

            // 4. Открываем размытый фон 
            overlay.classList.add('active');

            // Событие при клике на названией текущей секции в форме
            currentTitle.addEventListener('click', function() {

                // Вставляем название текущей секции в поле input
                input.value = this.textContent;

            })

            // Прячем модальное окно
            let closeModal = function(e) {

                // Прячем модальное окно
                modal.classList.remove('modal-open');

                // Прячем размытый фон
                overlay.classList.remove('active');

            }

            // Сохраняем новое имя и прячем модальное окно
            let saveModal = function() {

                // Проверяем поле на пустоту
                if (input.value == '') {

                    // Если пусто, то ничего не делаем
                    return false;

                } else {

                    // Добавляем текс текущей секции из поля input
                    name.textContent = input.value;

                }

                // Прячем модальное окно
                modal.classList.remove('modal-open');

                // Прячем размытый фон
                overlay.classList.remove('active');

            }

            // Отрабатываем клик по кнопке сохранить
            save.addEventListener('click', saveModal)

            // Отрабатываем клик по кнопке закрыть
            close.addEventListener('click', closeModal)

            // Отрабатываем клик по размытому фону
            overlay.addEventListener('click', closeModal)

        })

    })
}

// ************* WI-FI SSID *************
let wifiSsid = document.querySelector('.js-wifi-ssid'); // Коллекция секций

if (wifiSsid) {

    // Событие при клике на название текущей секции
    wifiSsid.addEventListener('click', function() {
        let modal = document.querySelector('#wifi-ssid'), // Модальное окно
            form = modal.querySelector('form'), // Форма модального окна
            save = modal.querySelector('.js-modal-save'), // Кнопка Сохранить
            close = modal.querySelector('.js-modal-close'); // Кнопка Закрыть

        // Очищаем все поля формы
        form.reset();

        // Открываем модальное окно
        modal.classList.add('modal-open');

        // Открываем размытый фон 
        overlay.classList.add('active');

        // Прячем модальное окно
        let closeModal = function(e) {

            // Прячем модальное окно
            modal.classList.remove('modal-open');

            // Прячем размытый фон
            overlay.classList.remove('active');

        }

        // Отрабатываем клик по кнопке сохранить
        save.addEventListener('click', closeModal)

        // Отрабатываем клик по кнопке закрыть
        close.addEventListener('click', closeModal)

        // Отрабатываем клик по размытому фону
        overlay.addEventListener('click', closeModal)

    })
}

// ************* Меняем пароль WI-FI SSID *************
let wifiPass = document.querySelector('.js-wifi-pass'); // Коллекция секций

if (wifiPass) {
    // Событие при клике на название текущей секции
    wifiPass.addEventListener('click', function() {
        let modal = document.querySelector('#wifi-pass'), // Модальное окно
            form = modal.querySelector('form'), // Форма модального окна
            save = modal.querySelector('.js-modal-save'), // Кнопка Сохранить
            close = modal.querySelector('.js-modal-close'); // Кнопка Закрыть

        // Очищаем все поля формы
        form.reset();

        // Открываем модальное окно
        modal.classList.add('modal-open');

        // Открываем размытый фон 
        overlay.classList.add('active');

        // Прячем модальное окно
        let closeModal = function(e) {

            // Прячем модальное окно
            modal.classList.remove('modal-open');

            // Прячем размытый фон
            overlay.classList.remove('active');

        }

        // Отрабатываем клик по кнопке сохранить
        save.addEventListener('click', closeModal)

        // Отрабатываем клик по кнопке закрыть
        close.addEventListener('click', closeModal)

        // Отрабатываем клик по размытому фону
        overlay.addEventListener('click', closeModal)

    })
}

// ************* Меняем IP-адрес *************
let lanIp = document.querySelector('.js-lan-ip'); // Коллекция секций

if (lanIp) {
    // Событие при клике на название текущей секции
    lanIp.addEventListener('click', function() {
        let modal = document.querySelector('#lanIp'), // Модальное окно
            form = modal.querySelector('form'), // Форма модального окна
            save = modal.querySelector('.js-modal-save'), // Кнопка Сохранить
            close = modal.querySelector('.js-modal-close'); // Кнопка Закрыть

        // Очищаем все поля формы
        form.reset();

        // Открываем модальное окно
        modal.classList.add('modal-open');

        // Открываем размытый фон 
        overlay.classList.add('active');

        // Прячем модальное окно
        let closeModal = function(e) {

            // Прячем модальное окно
            modal.classList.remove('modal-open');

            // Прячем размытый фон
            overlay.classList.remove('active');

        }

        // Отрабатываем клик по кнопке сохранить
        save.addEventListener('click', closeModal)

        // Отрабатываем клик по кнопке закрыть
        close.addEventListener('click', closeModal)

        // Отрабатываем клик по размытому фону
        overlay.addEventListener('click', closeModal)

    })
}

// ************* Меняем CAN - значение *************
let canType = document.querySelector('.js-can-type'); // Коллекция секций

if (canType) {
    // Событие при клике на название текущей секции
    canType.addEventListener('click', function() {
        let modal = document.querySelector('#canType'), // Модальное окно
            close = modal.querySelector('.js-modal-ok'); // Кнопка Закрыть

        // Открываем модальное окно
        modal.classList.add('modal-open');

        // Открываем размытый фон 
        overlay.classList.add('active');

        // Прячем модальное окно
        let closeModal = function(e) {

            // Прячем модальное окно
            modal.classList.remove('modal-open');

            // Прячем размытый фон
            overlay.classList.remove('active');

        }

        // Отрабатываем клик по кнопке закрыть
        close.addEventListener('click', closeModal)

        // Отрабатываем клик по размытому фону
        overlay.addEventListener('click', closeModal)

    })
}

// ************* Меняем CAN - значение *************
let dfcType = document.querySelector('.js-dfc-type'); // Коллекция секций

if (dfcType) {
    // Событие при клике на название текущей секции
    dfcType.addEventListener('click', function() {
        let modal = document.querySelector('#dfcType'), // Модальное окно
            close = modal.querySelector('.js-modal-ok'); // Кнопка Закрыть

        // Открываем модальное окно
        modal.classList.add('modal-open');

        // Открываем размытый фон 
        overlay.classList.add('active');

        // Прячем модальное окно
        let closeModal = function(e) {

            // Прячем модальное окно
            modal.classList.remove('modal-open');

            // Прячем размытый фон
            overlay.classList.remove('active');

        }

        // Отрабатываем клик по кнопке закрыть
        close.addEventListener('click', closeModal)

        // Отрабатываем клик по размытому фону
        overlay.addEventListener('click', closeModal)

    })
}

// ************* Меняем тип фильтра *************
let filterBtns = document.querySelectorAll('.js-filter-type'); // Коллекция кнопок типа фильтра

if (filterBtns) {
    // Перебираем коллекцию кнопок типа фильтра
    filterBtns.forEach(function(btn) {

        // Событие при клике кнопку
        btn.addEventListener('click', function(e) {

            let name = this, // Текущая кнопка
                modal = document.querySelector('#filterType'), // Модальное окно
                form = modal.querySelector('form'), // Форма модального окна
                filterList = form.querySelectorAll('.radio-group'), // Коллекция фильтров
                save = modal.querySelector('.js-modal-ok'); // Кнопка Сохранить

            // Очищаем все поля формы
            form.reset();

            // Открываем модальное окно
            modal.classList.add('modal-open');

            // Открываем размытый фон 
            overlay.classList.add('active');

            // Перебираем список фильтров
            filterList.forEach(function(filter) {

                let filterInput = filter.querySelector('input'); // Поле input

                // Устанавливаем значение :checked полю input если оно изначально равно текущему значению кнопки
                if (filterInput.value === name.dataset.filter) {

                    filterInput.checked = true;

                } else {

                    filterInput.checked = false;

                }

            })

            // Прячем модальное окно
            let closeModal = function(e) {

                // Прячем модальное окно
                modal.classList.remove('modal-open');

                // Прячем размытый фон
                overlay.classList.remove('active');

            }

            // Прячем модальное окно
            let saveModal = function() {

                // Прячем модальное окно
                modal.classList.remove('modal-open');

                // Прячем размытый фон
                overlay.classList.remove('active');

                form.reset();

            }

            // Отрабатываем клик по кнопке сохранить
            save.addEventListener('click', saveModal)

            // Отрабатываем клик по размытому фону
            overlay.addEventListener('click', closeModal)

        })

    })
}

// ************* Меняем значение dB/Oct *************
let dboctBtns = document.querySelectorAll('.js-db_oct-type'); // Коллекция кнопок типа фильтра

if (dboctBtns) {
    // Перебираем коллекцию кнопок типа фильтра
    dboctBtns.forEach(function(btn) {

        // Событие при клике кнопку
        btn.addEventListener('click', function(e) {

            let name = this, // Текущая кнопка
                modal = document.querySelector('#dbOctType'), // Модальное окно
                form = modal.querySelector('form'), // Форма модального окна
                filterList = form.querySelectorAll('.radio-group'), // Коллекция фильтров
                save = modal.querySelector('.js-modal-ok'); // Кнопка Сохранить

            // Очищаем все поля формы
            form.reset();

            // Открываем модальное окно
            modal.classList.add('modal-open');

            // Открываем размытый фон 
            overlay.classList.add('active');

            // Перебираем список фильтров
            filterList.forEach(function(filter) {

                let filterInput = filter.querySelector('input'); // Поле input

                // Устанавливаем значение :checked полю input если оно изначально равно текущему значению кнопки
                if (filterInput.value === name.dataset.dboct) {

                    filterInput.checked = true;

                } else {

                    filterInput.checked = false;

                }

            })

            // Прячем модальное окно
            let closeModal = function(e) {

                // Прячем модальное окно
                modal.classList.remove('modal-open');

                // Прячем размытый фон
                overlay.classList.remove('active');

            }

            // Прячем модальное окно
            let saveModal = function() {

                // Прячем модальное окно
                modal.classList.remove('modal-open');

                // Прячем размытый фон
                overlay.classList.remove('active');

                form.reset();

            }

            // Отрабатываем клик по кнопке сохранить
            save.addEventListener('click', saveModal)

            // Отрабатываем клик по размытому фону
            overlay.addEventListener('click', closeModal)

        })

    })
}

// ************* Lock / Unlock *************
let lockUnlock = document.querySelectorAll('.js-btn__lock'); // Коллекция кнопок типа фильтра

if (lockUnlock) {
    // Перебираем коллекцию кнопок типа фильтра
    lockUnlock.forEach(function(btn) {

        // Событие при клике кнопку
        btn.addEventListener('click', function(e) {

            let modal = document.querySelector('#lock'), // Модальное окно
                form = modal.querySelector('form'), // Форма модального окна
                input = modal.querySelector('#captcha'), // Поле для ввода каптчи
                lock = modal.querySelector('.js-modal__btn--lock'), // Кнопка Разблокировать
                unlock = modal.querySelector('.js-modal__btn--unlock'); // Кнопка Заблокировать

            // Очищаем все поля формы
            form.reset();

            input.addEventListener('input', () => {
                if (input.value.length >= 3) {
                    input.removeAttribute('style');
                }
            })

            // Открываем модальное окно
            modal.classList.add('modal-open');

            // Открываем размытый фон 
            overlay.classList.add('active');

            // Прячем модальное окно
            let closeModal = function(e) {

                // Прячем модальное окно
                modal.classList.remove('modal-open');

                // Прячем размытый фон
                overlay.classList.remove('active');

                form.reset();

                btn.removeAttribute('style')

            }

            // Прячем модальное окно
            let saveModal = function() {

                if (input.value == '') {
                    input.setAttribute('style', 'border:1px solid red;')
                    return false;
                } else {
                    // Прячем модальное окно
                    modal.classList.remove('modal-open');

                    // Прячем размытый фон
                    overlay.classList.remove('active');

                    form.reset();

                    btn.setAttribute('style', 'color: #54c688;')
                }


            }

            // Отрабатываем клик по кнопке Разблокировать
            unlock.addEventListener('click', saveModal)

            // Отрабатываем клик по кнопке Заблокировать
            lock.addEventListener('click', closeModal)

            // Отрабатываем клик по размытому фону
            overlay.addEventListener('click', closeModal)

        })

    })
}

// ***************************************************
let reboot = document.querySelector(".js-reboot-btn"); //- Кнопка перезагрузки
if (reboot) {

    let rebootModal = document.querySelector('#reboot'); // Модальное окно перезагрузки
    let rebootTimer = rebootModal.querySelector('.js-reboot-timer'); // Поле таймера

    let timerID;
    let counter = 0;

    let pressHoldEvent = new CustomEvent("pressHold");
    let pressHoldDuration = 180; // Время нажатия 
    reboot.addEventListener("mousedown", pressingDown, false);
    reboot.addEventListener("mouseup", notPressingDown, false);
    reboot.addEventListener("mouseleave", notPressingDown, false);

    reboot.addEventListener("touchstart", pressingDown, false);
    reboot.addEventListener("touchend", notPressingDown, false);

    function pressingDown(e) {
        requestAnimationFrame(timer);
        e.preventDefault();
        reboot.classList.add('pressed'); // Добавляем класс .pressed
    }

    function notPressingDown(e) {
        cancelAnimationFrame(timerID);
        counter = 0;
        // console.log("Порог нажатия не достигнут!");
        reboot.classList.remove('pressed'); // Удаляем класс .pressed
    }

    function timer() {

        if (counter < pressHoldDuration) {
            timerID = requestAnimationFrame(timer);
            counter++;
        } else {
            // console.log("Достигнут порог нажатия!");
            reboot.dispatchEvent(pressHoldEvent);
            rebootModal.classList.add('modal-open')
            overlay.classList.add('active')
            let rebootCount = 1000;
            let countCount = 15;
            rebootTimer.textContent = countCount;
            let rebootTimerStart = setInterval(() => {
                --countCount;
                rebootTimer.textContent = countCount;
            }, 1000);

            setTimeout(() => {
                clearInterval(rebootTimerStart);
                rebootModal.classList.remove('modal-open');
                overlay.classList.remove('active');
            }, parseInt(countCount * rebootCount));

        }
    }

    function doSomething(e) {
        // console.log("pressHold event fired!");
    }
}

let browser = document.querySelector('.js-browser');

if (browser) {
    let browserItems = browser.querySelectorAll('.js-browser-item .browser__item_top');

    browserItems.forEach(function(browserItem) {
        browserItem.addEventListener('click', function() {
            let parent = this.parentElement;
            if (parent.classList.contains('active')) {
                parent.classList.remove('active');
            } else {
                parent.classList.add('active');
            }
        })
    })
}

let filterSlice = document.querySelectorAll('.js-slice');

if (filterSlice) {
    for (const slice in filterSlice) {
        if (Object.hasOwnProperty.call(filterSlice, slice)) {
            const sliceBtn = filterSlice[slice];
            let sliceInfo = sliceBtn.querySelector('.js-slice-size');
            let sliceSize = parseInt(sliceInfo.textContent.replace('OFF', 0).replace(' Hz', ''))
            let sliceTitle = sliceBtn.children[0];

            function addNewSliceSize(e) {
                console.log(sliceInfo);
            }

            sliceBtn.addEventListener('click', () => {
                const modal = document.querySelector('#sliceSize'),
                    modalSave = modal.querySelector('.js-modal-save'),
                    modalClose = modal.querySelector('.js-modal-close'),
                    modalInput = modal.querySelector('input'),
                    modalInputMin = parseInt(modalInput.getAttribute('min')),
                    modalInputMax = parseInt(modalInput.getAttribute('max'));
                const left = modal.querySelector('.js-slice-left'),
                    right = modal.querySelector('.js-slice-right');

                console.log(modalInputMin + ' - ' + modalInputMax)

                let sliceCount = modalInputMin;

                // Открываем модальное окно
                modal.classList.add('modal-open');
                // Открываем overlay
                overlay.classList.add('active');
                // Подменяем название окна
                modal.querySelector('.modal__header_text').textContent = sliceTitle.textContent;
                // Устанавливаем в поле input текущее значение
                modalInput.value = sliceSize;
                sliceCount = sliceSize;
                modalInput.focus();

                modalInput.addEventListener('change', () => {
                    sliceCount = parseInt(modalInput.value)
                })

                modalInput.addEventListener('keyup', () => {
                    if (modalInput.value >= modalInputMax) {
                        modalInput.value = modalInputMax;
                    } else if (modalInput.value < modalInputMin) {
                        modalInput.value = modalInput.value.replace(0, '');
                        sliceCount = modalInputMin;
                        modalInput.value = modalInputMin;
                    } else {
                        modalInput.value = modalInput.value.replace(/\D/, '')
                    }
                })

                left.addEventListener('click', () => {
                    if (+modalInput.value <= modalInputMin || +modalInput.value == '') {
                        modalInput.focus()
                        modalInput.value = modalInputMin;
                    } else {
                        modalInput.focus()
                        sliceCount--;
                        modalInput.value = sliceCount;
                    }
                })
                right.addEventListener('click', () => {
                    if (+modalInput.value >= modalInputMax) {
                        modalInput.focus()
                        modalInput.value = modalInputMax;
                    } else if (+modalInput.value < modalInputMin) {
                        modalInput.focus()
                        sliceCount = modalInputMin;
                        modalInput.value = modalInputMin;
                    } else {
                        modalInput.focus()
                        sliceCount++;
                        modalInput.value = sliceCount;
                    }
                })

                modalClose.addEventListener('click', () => {
                    sliceCount = modalInputMin;
                    overlay.classList.remove('active');
                    modal.classList.remove('modal-open');
                })
                overlay.addEventListener('click', () => {
                    sliceCount = modalInputMin;
                    overlay.classList.remove('active');
                    modal.classList.remove('modal-open');
                })
                modalSave.addEventListener('click', () => {
                    sliceCount = modalInputMin;
                    overlay.classList.remove('active');
                    modal.classList.remove('modal-open');
                })
            })
        }
    }
}